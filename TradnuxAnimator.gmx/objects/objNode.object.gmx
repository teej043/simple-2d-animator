<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>X = 0;
Y = 0;
rot = 0;
len = 10;
wid = 5;

core = false;
parent = noone; 
childNth = 1;
generation = 0;
childCount = 0;
children = 0;
rotStart = 0;

selected = false;
drag = false;

data = ds_map_create();
ds_map_add(data,"core",false);
ds_map_add(data,"parent",noone);
ds_map_add(data,"childNth",1);
ds_map_add(data,"generation",0);
ds_map_add(data,"childCount",0);
ds_map_add(data,"rotStart",0);

children = ds_list_create();
X = ds_list_create();
Y = ds_list_create();
rot = ds_list_create();
len = ds_list_create();
wid = ds_list_create();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var wx, wy, par, frame;
par = data[? "parent"];
wx = window_view_mouse_get_x(0);
wy = window_view_mouse_get_y(0);
frame = global.frameCurrent-1;

if (wx &gt; x-5 and wx &lt; x+5){
    if (wy &gt; y-5 and wy &lt; y+5){
        if mouse_check_button_pressed(mb_left){
            objNode.selected = false;
            //objNode.rotStart = objNode.rot;
            selected = true;
            global.selectedNode = id;
            
            //iterate children drag
            for( i = 1; i &lt;= childCount; i+=1 ){
                
            }
        }
        
        if mouse_check_button(mb_left){
            if selected{
                drag = true;
            }
        }else{
            drag = false;
        }
        
        if mouse_check_button_released(mb_left){
            if !drag drag = false;
            
        }
        
    }
}

if drag{
    x = wx;
    y = wy;
    X[| frame] = x;
    Y[| frame] = y;
    if !core{
        rot[| frame] = point_direction(par.x, par.y, x, y);
        len[| frame] = point_distance(par.x, par.y, x, y);
    }   
}

/*
if !core and !selected{
    x = parent.x + len*cos(degtorad(rot));
    y = parent.y - len*sin(degtorad(rot));
    X = x;
    Y = y;
}
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var wx,wy,xx,yy,width,length,frame,parX,parY;
wx = window_view_mouse_get_x(0);
wy = window_view_mouse_get_y(0);
frame = global.frameCurrent-1;

if ds_map_exists(data,X){
    xx = X[| frame];
    yy = Y[| frame];
}else{
    xx = x;
    yy = y;
}

width = wid[| frame];
length = len[| frame];

if (data[? "core"] == false){
    parX = data[? "parent"].X[| frame];
    parY = data[? "parent"].Y[| frame];
}else{
    parX = xx;
    parY = yy;
}

draw_circle(xx, yy, width, 1);

if selected{
    draw_circle(xx, yy, width, 0);
}

if drag{
    draw_circle_colour(xx, yy, width, c_black, c_black, 1);
}

if (wx &gt; x-5 and wx &lt; x+5){
    if (wy &gt; y-5 and wy &lt; y+5){
        draw_circle_colour(xx, yy, width, c_aqua, c_aqua, 0);
    }
}

if !core{
    draw_line(xx, yy, parX, parY);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
